using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using ForensicStudio.Module.Windows.Friend;
using ManaErp.Core.Main.Event;
using ManaErp.DataAccess.Wrapper.Pluralsight;
using ManaErp.Module.Core.Detail;
using ManaErp.Module.Manufacturing.Pluralsight.Friend;
using ManaErp.Service.Application.Pluralsight.Meeting;
using ManaErp.Service.Main.Pluralsight.MessageDialog;
using Prism.Commands;
using Prism.Events;

namespace ManaErp.Module.Manufacturing.Pluralsight.Meeting
{
    public class MeetingDetailViewModel : DetailViewModelBase, IMeetingDetailViewModel
    {
        private readonly IMeetingRepository _meetingRepository;
        private readonly IMessageDialogService _messageDialogService;
        private List<DataAccess.Model._Pluralsight.Friend> _allFriends;

        public MeetingDetailViewModel(IEventAggregator eventAggregator,
            IMessageDialogService messageDialogService,
            IMeetingRepository meetingRepository) : base(eventAggregator, messageDialogService)
        {
            _meetingRepository = meetingRepository;
            _messageDialogService = messageDialogService;
            eventAggregator.GetEvent<AfterDetailSavedEvent>().Subscribe(AfterDetailSaved);
            eventAggregator.GetEvent<AfterDetailDeletedEvent>().Subscribe(AfterDetailDeleted);

            AddedFriends = new ObservableCollection<DataAccess.Model._Pluralsight.Friend>();
            AvailableFriends = new ObservableCollection<DataAccess.Model._Pluralsight.Friend>();
            AddFriendCommand = new DelegateCommand(OnAddFriendExecute, OnAddFriendCanExecute);
            RemoveFriendCommand = new DelegateCommand(OnRemoveFriendExecute, OnRemoveFriendCanExecute);
        }

        private MeetingWrapper _meeting;
        public MeetingWrapper Meeting
        {
            get { return _meeting; }
            set
            {
                _meeting = value;
                OnPropertyChanged();
            }
        }

        public ICommand AddFriendCommand { get; }

        public ICommand RemoveFriendCommand { get; }

        public ObservableCollection<DataAccess.Model._Pluralsight.Friend> AddedFriends { get; }

        public ObservableCollection<DataAccess.Model._Pluralsight.Friend> AvailableFriends { get; }

        private DataAccess.Model._Pluralsight.Friend _selectedAvailableFriend;
        public DataAccess.Model._Pluralsight.Friend SelectedAvailableFriend
        {
            get { return _selectedAvailableFriend; }
            set
            {
                _selectedAvailableFriend = value;
                OnPropertyChanged();
                ((DelegateCommand)AddFriendCommand).RaiseCanExecuteChanged();
            }
        }

        private DataAccess.Model._Pluralsight.Friend _selectedAddedFriend;
        public DataAccess.Model._Pluralsight.Friend SelectedAddedFriend
        {
            get { return _selectedAddedFriend; }
            set
            {
                _selectedAddedFriend = value;
                OnPropertyChanged();
                ((DelegateCommand)RemoveFriendCommand).RaiseCanExecuteChanged();
            }
        }

        public override async Task LoadAsync(int meetingId)
        {
            var meeting = meetingId > 0
                ? await _meetingRepository.GetByIdAsync(meetingId)
                : CreateNewMeeting();

            Id = meetingId;

            InitializeMeeting(meeting);

            _allFriends = await _meetingRepository.GetAllFriendsAsync();

            SetupPickList();
        }

        protected override void OnDeleteExecute()
        {
            var result = _messageDialogService.ShowOkCancelDialog(
                $"Do you really want to delete the meeting {Meeting.Title}", "Question");
            if (result == MessageDialogResult.OK)
            {
                _meetingRepository.Remove(Meeting.Model);
                _meetingRepository.SaveAsync();
                RaiseDetailDeletedEvent(Meeting.Id);
            }
        }

        protected override bool OnSaveCanExecute()
        {
            return Meeting != null && !Meeting.HasErrors && HasChanges;
        }

        protected override async void OnSaveExecute()
        {
            await _meetingRepository.SaveAsync();
            HasChanges = _meetingRepository.HasChanges();
            Id = Meeting.Id;
            RaiseDetailSavedEvent(Meeting.Id, Meeting.Title);
        }

        private void SetupPickList()
        {
            var meetingFriendIds = Meeting.Model.Friends.Select(item => item.Id).ToList();
            var addedFriends = _allFriends.Where(item => meetingFriendIds.Contains(item.Id)).OrderBy(item => item.FirstName);
            var availableFriends = _allFriends.Except(addedFriends).OrderBy(item => item.FirstName);

            AddedFriends.Clear();
            AvailableFriends.Clear();

            foreach (var addedFriend in AddedFriends)
            {
                AddedFriends.Add(addedFriend);
            }

            foreach (var availableFriend in availableFriends)
            {
                AvailableFriends.Add(availableFriend);
            }
        }

        private DataAccess.Model._Pluralsight.Meeting CreateNewMeeting()
        {
            var meeting = new DataAccess.Model._Pluralsight.Meeting
            {
                DateFrom = DateTime.Now,
                DateTo = DateTime.Now
            };
            _meetingRepository.Add(meeting);
            return meeting;
        }

        private void InitializeMeeting(DataAccess.Model._Pluralsight.Meeting meeting)
        {
            Meeting = new MeetingWrapper(meeting);
            Meeting.PropertyChanged += (s, e) =>
            {
                if (!HasChanges)
                {
                    HasChanges = _meetingRepository.HasChanges();
                }

                if (e.PropertyName == nameof(Meeting.HasErrors))
                {
                    ((DelegateCommand)SaveCommand).RaiseCanExecuteChanged();
                }

                if (e.PropertyName == nameof(Meeting.Title))
                {
                    SetTitle();
                }
            };
            ((DelegateCommand)SaveCommand).RaiseCanExecuteChanged();

            if (Meeting.Id == 0)
            {
                Meeting.Title = "";
            }
            SetTitle();
        }

        private void SetTitle()
        {
            Title = Meeting.Title;
        }

        private void OnRemoveFriendExecute()
        {
            var friendToRemove = SelectedAddedFriend;

            Meeting.Model.Friends.Remove(friendToRemove);
            AddedFriends.Remove(friendToRemove);
            AvailableFriends.Add(friendToRemove);
            HasChanges = _meetingRepository.HasChanges();
            ((DelegateCommand)SaveCommand).RaiseCanExecuteChanged();
        }

        private bool OnRemoveFriendCanExecute()
        {
            return SelectedAddedFriend != null;
        }

        private bool OnAddFriendCanExecute()
        {
            return SelectedAvailableFriend != null;
        }

        private void OnAddFriendExecute()
        {
            var friendToAdd = SelectedAvailableFriend;

            Meeting.Model.Friends.Add(friendToAdd);
            AddedFriends.Add(friendToAdd);
            AvailableFriends.Remove(friendToAdd);
            HasChanges = _meetingRepository.HasChanges();
            ((DelegateCommand)SaveCommand).RaiseCanExecuteChanged();
        }

        private async void AfterDetailSaved(AfterDetailSavedEventArgs args)
        {
            if (args.ViewModelName == nameof(FriendDetailViewModel))
            {
                await _meetingRepository.ReloadFriendAsync(args.Id);
                _allFriends = await _meetingRepository.GetAllFriendsAsync();

                SetupPickList();
            }
        }

        private async void AfterDetailDeleted(AfterDetailDeletedEventArgs args)
        {
            if (args.ViewModelName == nameof(FriendDetailViewModel))
            {
                await _meetingRepository.ReloadFriendAsync(args.Id);
                _allFriends = await _meetingRepository.GetAllFriendsAsync();

                SetupPickList();
            }
        }
    }
}



using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using ForensicStudio.DataAccess.Wrapper.Windows;
using ForensicStudio.Service.Main.MessageBox;
using ForensicStudio.Service.Windows.VulnerabilitySource;
using Prism.Commands;
using Prism.Events;

namespace ForensicStudio.Module.Windows.VulnerabilitySource;

public class VulnerabilitySourceDetailViewModel : DetailViewModelBase
{
    private readonly IVulnerabilitySourceRepository _vulnerabilitySourceRepository;

    public VulnerabilitySourceDetailViewModel(IEventAggregator eventAggregator,
        IMessageBoxService messageBoxService,
        IVulnerabilitySourceRepository vulnerabilitySourceRepository)
        : base(eventAggregator, messageBoxService)
    {
        _vulnerabilitySourceRepository = vulnerabilitySourceRepository;
        Title = "Programming Languages";
        VulnerabilitySources = new ObservableCollection<VulnerabilitySourceWrapper>();

        AddCommand = new DelegateCommand(OnAddExecute);
        RemoveCommand = new DelegateCommand(OnRemoveExecute, OnRemoveCanExecute);
    }

    public override async Task LoadAsync(int modelId)
    {
        Id = modelId;

        foreach (var wrapper in VulnerabilitySources)
        {
            wrapper.PropertyChanged -= Wrapper_PropertyChanged;
        }

        VulnerabilitySources.Clear();

        var languages = await _vulnerabilitySourceRepository.GetAllAsync();

        foreach (var model in languages)
        {
            var wrapper = new VulnerabilitySourceWrapper(model);
            wrapper.PropertyChanged += Wrapper_PropertyChanged;
            VulnerabilitySources.Add(wrapper);
        }
    }

    private void Wrapper_PropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        if (!HasChanges)
        {
            HasChanges = _vulnerabilitySourceRepository.HasChanges();
        }

        if (e.PropertyName == nameof(VulnerabilitySourceWrapper.HasErrors))
        {
            ((DelegateCommand)SaveCommand).RaiseCanExecuteChanged();
        }
    }

    public ObservableCollection<VulnerabilitySourceWrapper> VulnerabilitySources { get; set; }

    public ICommand AddCommand { get; set; }
    public ICommand RemoveCommand { get; set; }

    private VulnerabilitySourceWrapper _selectedVulnerabilitySource;
    public VulnerabilitySourceWrapper SelectedVulnerabilitySource
    {
        get => _selectedVulnerabilitySource;
        set
        {
            _selectedVulnerabilitySource = value;
            OnPropertyChanged();
            ((DelegateCommand)RemoveCommand).RaiseCanExecuteChanged();
        }
    }

    protected async override void OnSaveExecute()
    {
        try
        {
            await _vulnerabilitySourceRepository.SaveAsync();
            HasChanges = _vulnerabilitySourceRepository.HasChanges();
            RaiseCollectionSavedEvent();
        }
        catch (Exception ex)
        {
            while (ex.InnerException != null)
            {
                ex = ex.InnerException;
            }

            MessageBoxService.ShowInfo("Error while saving the entities, " +
                                                "the data will be reloaded. Details: " + ex.Message);
            await LoadAsync(Id);
        }
    }

    protected override bool OnSaveCanExecute()
    {
        return HasChanges && VulnerabilitySources.All(p => !p.HasErrors);
    }

    protected override void OnDeleteExecute()
    {
    }

    private void OnAddExecute()
    {
        var wrapper = new VulnerabilitySourceWrapper(new DataAccess.Model.Windows.VulnerabilitySource());
        wrapper.PropertyChanged += Wrapper_PropertyChanged;
        _vulnerabilitySourceRepository.Add(wrapper.Model);
        VulnerabilitySources.Add(wrapper);

        // Trigger the validation
        wrapper.Name = "";
    }

    private async void OnRemoveExecute()
    {
        var isReferenced = await _vulnerabilitySourceRepository
            .IsReferencedByVulnerabilityAsync(SelectedVulnerabilitySource.Id);

        if (isReferenced)
        {
            MessageBoxService.ShowInfo($"The language {SelectedVulnerabilitySource.Name}" +
                                                " can't be removed, as it is referenced by at least one friend");
            return;
        }

        SelectedVulnerabilitySource.PropertyChanged -= Wrapper_PropertyChanged;
        _vulnerabilitySourceRepository.Remove(SelectedVulnerabilitySource.Model);
        VulnerabilitySources.Remove(SelectedVulnerabilitySource);
        SelectedVulnerabilitySource = null;
        HasChanges = _vulnerabilitySourceRepository.HasChanges();
        ((DelegateCommand)SaveCommand).RaiseCanExecuteChanged();

    }

    private bool OnRemoveCanExecute()
    {
        return SelectedVulnerabilitySource != null;
    }
}

//private readonly IVulnerabilityService _friendRepository;
    //private readonly IProgrammingLanguageLookupDataService _programmingLanguageLookupDataService;

    //public VulnerabilityDetailViewModel(IVulnerabilityRepository friendRepository,
    //    IEventAggregator eventAggregator, IMessageDialogService messageDialogService,
    //    IProgrammingLanguageLookupDataService programmingLanguageLookupDataService) : base(eventAggregator, messageDialogService)
    //{
    //    _friendRepository = friendRepository;
    //    _programmingLanguageLookupDataService = programmingLanguageLookupDataService;

    //    eventAggregator.GetEvent<AfterCollectionSavedEvent>()
    //        .Subscribe(AfterCollectionSaved);

    //    AddPhoneNumberCommand = new DelegateCommand(OnAddPhoneNumberExecute);
    //    RemovePhoneNumberCommand = new DelegateCommand(
    //        OnRemovePhoneNumberExecute, OnRemovePhoneNumberCanExecute);

    //    ProgrammingLanguages = new ObservableCollection<LookupItem>();
    //    PhoneNumbers = new ObservableCollection<FriendPhoneNumberWrapper>();
    //}

    //public override async Task LoadAsync(int friendId)
    //{
    //    var friend = friendId > 0 ? await _friendRepository.GetByIdAsync(friendId)
    //        : CreateNewFriend();

    //    Id = friendId;

    //    InitializeFriend(friend);

    //    InitializeFriendPhoneNumbers(friend.FriendPhoneNumbers);

    //    await LoadProgrammingLanguageLookupAsync();
    //}

    //private void InitializeFriend(DataAccess.Model._Pluralsight.Friend friend)
    //{
    //    Friend = new FriendWrapper(friend);
    //    Friend.PropertyChanged += (sender, e) =>
    //    {
    //        if (!HasChanges)
    //        {
    //            HasChanges = _friendRepository.HasChanges();
    //        }

    //        if (e.PropertyName == nameof(Friend.HasErrors))
    //        {
    //            // ReSharper disable once SuspiciousTypeConversion.Global
    //            ((DelegateCommand)SaveCommand).RaiseCanExecuteChanged();
    //        }

    //        if (e.PropertyName == nameof(Friend.FirstName) ||
    //            e.PropertyName == nameof(Friend.LastName))
    //        {
    //            SetTitle();
    //        }
    //    };

    //    // ReSharper disable once SuspiciousTypeConversion.Global
    //    ((DelegateCommand)SaveCommand).RaiseCanExecuteChanged();
    //    if (Friend.Id == 0)
    //    {
    //        Friend.FirstName = "";
    //    }
    //    SetTitle();
    //}

    //private void SetTitle()
    //{
    //    Title = $"{Friend.FirstName} {Friend.LastName}";
    //}

    //private void InitializeFriendPhoneNumbers(ICollection<FriendPhoneNumber> phoneNumbers)
    //{
    //    foreach (var wrapper in PhoneNumbers)
    //    {
    //        wrapper.PropertyChanged -= FriendPhoneNumberWrapper_PropertyChanged;
    //    }
    //    PhoneNumbers.Clear();
    //    foreach (var friendPhoneNumber in phoneNumbers)
    //    {
    //        var wrapper = new FriendPhoneNumberWrapper(friendPhoneNumber);
    //        PhoneNumbers.Add(wrapper);
    //        wrapper.PropertyChanged += FriendPhoneNumberWrapper_PropertyChanged;
    //    }
    //}

    //private void FriendPhoneNumberWrapper_PropertyChanged(object sender, PropertyChangedEventArgs e)
    //{
    //    if (!HasChanges)
    //    {
    //        HasChanges = _friendRepository.HasChanges();
    //    }

    //    if (e.PropertyName == nameof(FriendPhoneNumberWrapper.HasErrors))
    //    {
    //        ((DelegateCommand)SaveCommand).RaiseCanExecuteChanged();
    //    }
    //}

    //private async Task LoadProgrammingLanguageLookupAsync()
    //{
    //    ProgrammingLanguages.Clear();
    //    ProgrammingLanguages.Add(new NullLookupItem { DisplayMember = " - " });
    //    var lookup = await _programmingLanguageLookupDataService.GetProgrammingLanguageLookupAsync();
    //    foreach (var lookupItem in lookup)
    //    {
    //        ProgrammingLanguages.Add(lookupItem);
    //    }
    //}

    //protected override async void OnSaveExecute()
    //{
    //    await SaveWithOptimisticConcurrencyAsync(_friendRepository.SaveAsync,
    //        () =>
    //        {
    //            HasChanges = _friendRepository.HasChanges();
    //            Id = Friend.Id;
    //            RaiseDetailSavedEvent(Friend.Id, $"{Friend.FirstName} {Friend.LastName}");
    //        });
    //}

    //protected override bool OnSaveCanExecute()
    //{
    //    return Friend != null
    //           && !Friend.HasErrors
    //           && PhoneNumbers.All(pn => !pn.HasErrors)
    //           && HasChanges;
    //}

    //protected override async void OnDeleteExecute()
    //{
    //    if (await _friendRepository.HasMeetingsAsync(Friend.Id))
    //    {
    //        MessageDialogService.ShowInfoDialog($"{Friend.FirstName} {Friend.LastName} can't be deleted, as this friend is part of at least one meeting");
    //        return;
    //    }

    //    var result = MessageDialogService.ShowOkCancelDialog(
    //        $"Do you really want to delete the friend {Friend.FirstName} {Friend.LastName}",
    //        "Question");
    //    if (result == MessageDialogResult.OK)
    //    {
    //        _friendRepository.Remove(Friend.Model);
    //        await _friendRepository.SaveAsync();
    //        RaiseDetailDeletedEvent(Friend.Id);
    //    }
    //}

    //private void OnAddPhoneNumberExecute()
    //{
    //    var newNumber = new FriendPhoneNumberWrapper(new FriendPhoneNumber());
    //    newNumber.PropertyChanged += FriendPhoneNumberWrapper_PropertyChanged;
    //    PhoneNumbers.Add(newNumber);
    //    Friend.Model.FriendPhoneNumbers.Add(newNumber.Model);
    //    newNumber.Number = "";
    //}

    //private void OnRemovePhoneNumberExecute()
    //{
    //    SelectedPhoneNumber.PropertyChanged -= FriendPhoneNumberWrapper_PropertyChanged;
    //    _friendRepository.RemovePhoneNumber(SelectedPhoneNumber.Model);
    //    Friend.Model.FriendPhoneNumbers.Remove(SelectedPhoneNumber.Model);
    //    PhoneNumbers.Remove(SelectedPhoneNumber);
    //    SelectedPhoneNumber = null;
    //    HasChanges = _friendRepository.HasChanges();
    //    ((DelegateCommand)SaveCommand).RaiseCanExecuteChanged();
    //}

    //private bool OnRemovePhoneNumberCanExecute()
    //{
    //    return SelectedPhoneNumber != null;
    //}

    //public ObservableCollection<LookupItem> ProgrammingLanguages { get; }

    //public ObservableCollection<FriendPhoneNumberWrapper> PhoneNumbers { get; }

    //private FriendWrapper _friend;
    //public FriendWrapper Friend
    //{
    //    get { return _friend; }
    //    set
    //    {
    //        _friend = value;
    //        OnPropertyChanged();
    //    }
    //}

    //private FriendPhoneNumberWrapper _selectedPhoneNumber;
    //public FriendPhoneNumberWrapper SelectedPhoneNumber
    //{
    //    get { return _selectedPhoneNumber; }
    //    set
    //    {
    //        _selectedPhoneNumber = value;
    //        OnPropertyChanged();
    //        ((DelegateCommand)RemovePhoneNumberCommand).RaiseCanExecuteChanged();
    //    }
    //}

    //public ICommand AddPhoneNumberCommand { get; }

    //public ICommand RemovePhoneNumberCommand { get; }

    //private DataAccess.Model._Pluralsight.Friend CreateNewFriend()
    //{
    //    var friend = new DataAccess.Model._Pluralsight.Friend();
    //    _friendRepository.Add(friend);
    //    return friend;
    //}

    //private async void AfterCollectionSaved(AfterCollectionSavedEventArgs args)
    //{
    //    if (args.ViewModelName == nameof(ProgrammingLanguageDetailViewModel))
    //    {
    //        await LoadProgrammingLanguageLookupAsync();
    //    }
    //}