using ForensicStudio.DataAccess.Model.Windows;
using ForensicStudio.DataAccess.Wrapper.Core;

namespace ForensicStudio.DataAccess.Wrapper.Windows;

public class VulnerabilityWrapper : ModelWrapper<Vulnerability>
{
    public VulnerabilityWrapper()
    {
    }

    // ReSharper disable once UnusedMember.Global
    public VulnerabilityWrapper(Vulnerability model) : base(model)
    {
    }

    public string CveId
    {
        get => GetValue<string>();
        set => SetValue(value);
    }

    public double Score
    {
        get => GetValue<double>();
        set => SetValue(value);
    }

    public string Description
    {
        get => GetValue<string>();
        set => SetValue(value);
    }

    public DateTime PublishedDate
    {
        get => GetValue<DateTime>();
        set => SetValue(value);
    }

    public DateTime LastModifiedDateTime
    {
        get => GetValue<DateTime>();
        set => SetValue(value);
    }

    public int? VulnerabilitySourceId
    {
        get => GetValue<int?>();
        set => SetValue(value);
    }

    protected override IEnumerable<string> ValidateProperty(string propertyName)
    {
        return null;
        //switch (propertyName)
        //{
        //    case nameof(CveId):
        //        if (string.Equals(CveId, "Robot", StringComparison.OrdinalIgnoreCase))
        //        {
        //            yield return "Robots are not valid CveId";
        //        }
        //        break;
        //}
    }
}