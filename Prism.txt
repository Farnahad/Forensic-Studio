=============================== PRISM ===============================

protected override IModuleCatalog CreateModuleCatalog()
{
    return new DirectoryModuleCatalog() { ModulePath = @".\Modules" };
}

======================================================================

public partial class MainWindow : Window
{
	IModuleManager _moduleManager;

	public MainWindow(IModuleManager moduleManager)
	{
		InitializeComponent();
		_moduleManager = moduleManager;
	}

	private void Button_Click(object sender, RoutedEventArgs e)
	{
		_moduleManager.LoadModule("ModuleAModule");
	}
}

======================================================================

protected override void ConfigureViewModelLocator()
{
	base.ConfigureViewModelLocator();

	// type / type
	//ViewModelLocationProvider.Register(typeof(MainWindow).ToString(), typeof(CustomViewModel));

	// type / factory
	//ViewModelLocationProvider.Register(typeof(MainWindow).ToString(), () => Container.Resolve<CustomViewModel>());

	// generic factory
	//ViewModelLocationProvider.Register<MainWindow>(() => Container.Resolve<CustomViewModel>());

	// generic type
	ViewModelLocationProvider.Register<MainWindow, CustomViewModel>();
}

======================================================================

public MainWindowViewModel()
{
    ExecuteDelegateCommand = new DelegateCommand(Execute, CanExecute);

    DelegateCommandObservesProperty = new DelegateCommand(Execute, CanExecute).ObservesProperty(() => IsEnabled);

    DelegateCommandObservesCanExecute = new DelegateCommand(Execute).ObservesCanExecute(() => IsEnabled);

    ExecuteGenericDelegateCommand = new DelegateCommand<string>(ExecuteGeneric).ObservesCanExecute(() => IsEnabled);
}

======================================================================

public interface IApplicationCommands
{
    CompositeCommand SaveCommand { get; }
}

public class ApplicationCommands : IApplicationCommands
{
    private CompositeCommand _saveCommand = new CompositeCommand();
    public CompositeCommand SaveCommand
    {
        get { return _saveCommand; }
    }
}
	
public class TabViewModel : BindableBase
{
    IApplicationCommands _applicationCommands;

    public DelegateCommand UpdateCommand { get; private set; }

    public TabViewModel(IApplicationCommands applicationCommands)
    {
        _applicationCommands = applicationCommands;

        UpdateCommand = new DelegateCommand(Update).ObservesCanExecute(() => CanUpdate);

        _applicationCommands.SaveCommand.RegisterCommand(UpdateCommand);
    }      
}

======================================================================

<TabControl Grid.Row="1" Margin="10" prism:RegionManager.RegionName="ContentRegion" />

======================================================================

protected override void RegisterTypes(IContainerRegistry containerRegistry)
{
    containerRegistry.RegisterSingleton<IApplicationCommands, ApplicationCommands>();
}

======================================================================

public class MessageViewModel : BindableBase
{
    IEventAggregator _ea;

    private void SendMessage()
    {
        _ea.GetEvent<MessageSentEvent>().Publish(Message);
    }
}

public MessageListViewModel(IEventAggregator ea)
{
    _ea = ea;

    _ea.GetEvent<MessageSentEvent>().Subscribe(MessageReceived, ThreadOption.PublisherThread, false, (filter) => filter.Contains("Brian"));
}

======================================================================

public partial class PersonDetail : UserControl
{
    public PersonDetail()
    {
        InitializeComponent();
        RegionContext.GetObservableContext(this).PropertyChanged += PersonDetail_PropertyChanged;
    }

    private void PersonDetail_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        var context = (ObservableObject<object>)sender;
        var selectedPerson = (Person)context.Value;
        (DataContext as PersonDetailViewModel).SelectedPerson = selectedPerson;
    }
}

======================================================================

private void Navigate(string navigatePath)
{
    if (navigatePath != null)
        _regionManager.RequestNavigate("ContentRegion", navigatePath);
}

======================================================================

public MainWindowViewModel()
{
	IRegionManager regionManager;
	_regionManager.RequestNavigate("ContentRegion", navigatePath, NavigationComplete);		
}

private void NavigationComplete(NavigationResult result)
{
    System.Windows.MessageBox.Show(String.Format("Navigation to {0} complete. ", result.Context.Uri));
}

======================================================================

public class ModuleAModule : IModule
{
	public void OnInitialized(IContainerProvider containerProvider)
	{

	}

	public void RegisterTypes(IContainerRegistry containerRegistry)
	{
		containerRegistry.RegisterForNavigation<ViewA>();
		containerRegistry.RegisterForNavigation<ViewB>();
	}
}

======================================================================

public class ViewAViewModel : BindableBase, IRegionMemberLifetime
{
    public ViewAViewModel()
    {
    }

    public bool KeepAlive
    {
        get
        {
            return false;
        }
    }
}

======================================================================

public MainWindowViewModel(IRegionManager regionManager)
{
    _regionManager = regionManager;
    _regionManager.Regions.CollectionChanged += Regions_CollectionChanged;

    NavigateCommand = new DelegateCommand<string>(Navigate);
}

private void Navigate(string navigatePath)
{
    if (navigatePath != null)
        _regionManager.RequestNavigate("ContentRegion", navigatePath);
}

private void Regions_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
{
    if (e.Action == NotifyCollectionChangedAction.Add)
    {
        var region = (IRegion)e.NewItems[0];
        region.Views.CollectionChanged += Views_CollectionChanged;
    }
}

private void Views_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
{
    if (e.Action == NotifyCollectionChangedAction.Add)
    {
        Views.Add(e.NewItems[0].GetType().Name);
    }
    else if (e.Action == NotifyCollectionChangedAction.Remove)
    {
        Views.Remove(e.OldItems[0].GetType().Name);
    }
}

======================================================================

public class ModuleAModule : IModule
{
    public void OnInitialized(IContainerProvider containerProvider)
    {
        var regionManager = containerProvider.Resolve<IRegionManager>();
        regionManager.RequestNavigate("ContentRegion", "PersonList");
    }

    public void RegisterTypes(IContainerRegistry containerRegistry)
    {
        containerRegistry.RegisterForNavigation<PersonList>();
        containerRegistry.RegisterForNavigation<PersonDetail>();
    }
}

======================================================================

<ListBox x:Name="_listOfPeople" ItemsSource="{Binding People}">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="SelectionChanged">
            <prism:InvokeCommandAction Command="{Binding PersonSelectedCommand}"
			      CommandParameter="{Binding SelectedItem, ElementName=_listOfPeople}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
</ListBox>

======================================================================

public class PersonDetailViewModel : BindableBase, INavigationAware
{
    IRegionNavigationJournal _journal;

    public void OnNavigatedTo(NavigationContext navigationContext)
    {
        _journal = navigationContext.NavigationService.Journal;

        var person = navigationContext.Parameters["person"] as Person;
        if (person != null)
            SelectedPerson = person;
    }

    public bool IsNavigationTarget(NavigationContext navigationContext)
    {
        var person = navigationContext.Parameters["person"] as Person;
        if (person != null)
            return SelectedPerson != null && SelectedPerson.LastName == person.LastName;
        else
            return true;
    }

    private void GoBack()
    {
        _journal.GoBack();
    }
}
	
public class PersonListViewModel : BindableBase, INavigationAware
{
    IRegionManager _regionManager;
    IRegionNavigationJournal _journal;

    public PersonListViewModel(IRegionManager regionManager)
    {
        _regionManager = regionManager;
        GoForwardCommand = new DelegateCommand(GoForward, CanGoForward);
    }

    private void PersonSelected(Person person)
    {
        var parameters = new NavigationParameters();
        parameters.Add("person", person);

        if (person != null)
            _regionManager.RequestNavigate("ContentRegion", "PersonDetail", parameters);
    }

    public void OnNavigatedTo(NavigationContext navigationContext)
    {
        _journal = navigationContext.NavigationService.Journal;
        GoForwardCommand.RaiseCanExecuteChanged();
    }

    public bool IsNavigationTarget(NavigationContext navigationContext)
    {
        return true;
    }

    public void OnNavigatedFrom(NavigationContext navigationContext)
    {
    }

    private void GoForward()
    {
        _journal.GoForward();
    }

    private bool CanGoForward()
    {
        return _journal != null && _journal.CanGoForward;
    }
}

======================================================================

public partial class App
{
	protected override Window CreateShell()
	{
		return Container.Resolve<MainWindow>();
	}

	protected override void RegisterTypes(IContainerRegistry containerRegistry)
	{
		containerRegistry.RegisterDialog<NotificationDialog, NotificationDialogViewModel>();
	}
}



======================================================================

public class MainWindowViewModel : BindableBase
{
	private IDialogService _dialogService;

	public MainWindowViewModel(IDialogService dialogService)
	{
		_dialogService = dialogService;
	}

	private void ShowDialog()
	{
		var message = "This is a message that should be shown in the dialog.";
		//using the dialog service as-is
		_dialogService.ShowDialog("NotificationDialog", new DialogParameters($"message={message}"), r =>
		{
			if (r.Result == ButtonResult.None)
				Title = "Result is None";
			else if (r.Result == ButtonResult.OK)
				Title = "Result is OK";
			else if (r.Result == ButtonResult.Cancel)
				Title = "Result is Cancel";
			else
				Title = "I Don't know what you did!?";
		});
	}
}
	
public class NotificationDialogViewModel : BindableBase, IDialogAware
{
	private DelegateCommand<string> _closeDialogCommand;
	public DelegateCommand<string> CloseDialogCommand =>
		_closeDialogCommand ?? (_closeDialogCommand = new DelegateCommand<string>(CloseDialog));


	public DialogCloseListener RequestClose { get; }

	protected virtual void CloseDialog(string parameter)
	{
		ButtonResult result = ButtonResult.None;

		if (parameter?.ToLower() == "true")
			result = ButtonResult.OK;
		else if (parameter?.ToLower() == "false")
			result = ButtonResult.Cancel;

		RaiseRequestClose(new DialogResult(result));
	}

	public virtual void RaiseRequestClose(IDialogResult dialogResult)
	{
		RequestClose.Invoke(dialogResult);
	}
}

======================================================================

<UserControl x:Class="StylingDialog.Views.NotificationDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:prism="http://prismlibrary.com/"             
             prism:ViewModelLocator.AutoWireViewModel="True"
             Width="300" Height="150">
    <prism:Dialog.WindowStyle>
        <Style TargetType="Window">
            <Setter Property="prism:Dialog.WindowStartupLocation" Value="CenterScreen" />
            <Setter Property="ResizeMode" Value="NoResize"/>
            <Setter Property="ShowInTaskbar" Value="False"/>
            <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        </Style>
    </prism:Dialog.WindowStyle>
    <Grid x:Name="LayoutRoot" Margin="5">
        <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <TextBlock Text="{Binding Message}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Row="0" TextWrapping="Wrap" />
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0" Grid.Row="1" >
            <Button Command="{Binding CloseDialogCommand}" CommandParameter="true" Content="OK" Width="75" Height="25" IsDefault="True" />
            <Button Command="{Binding CloseDialogCommand}" CommandParameter="false" Content="Cancel" Width="75" Height="25" Margin="10,0,0,0" IsCancel="True" />
        </StackPanel>
    </Grid>
</UserControl>

======================================================================

IModuleManager _moduleManager;

_moduleManager.LoadModule("ModuleAModule");

======================================================================

public class MainWindowViewModel : BindableBase
{
	private readonly IRegionManager _regionManager;

	private string _title = "Prism Unity Application";
	public string Title
	{
		get { return _title; }
		set { SetProperty(ref _title, value); }
	}

	private ObservableCollection<object> _views = new ObservableCollection<object>();
	public ObservableCollection<object> Views
	{
		get { return _views; }
		set { SetProperty(ref _views, value); }
	}

	public DelegateCommand<string> NavigateCommand { get; private set; }

	public MainWindowViewModel(IRegionManager regionManager)
	{
		_regionManager = regionManager;
		_regionManager.Regions.CollectionChanged += Regions_CollectionChanged;

		NavigateCommand = new DelegateCommand<string>(Navigate);
	}

	private void Navigate(string navigatePath)
	{
		if (navigatePath != null)
			_regionManager.RequestNavigate("ContentRegion", navigatePath);
	}

	private void Regions_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
	{
		if (e.Action == NotifyCollectionChangedAction.Add)
		{
			var region = (IRegion)e.NewItems[0];
			region.Views.CollectionChanged += Views_CollectionChanged;
		}
	}

	private void Views_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
	{
		if (e.Action == NotifyCollectionChangedAction.Add)
		{
			Views.Add(e.NewItems[0].GetType().Name);
		}
		else if (e.Action == NotifyCollectionChangedAction.Remove)
		{
			Views.Remove(e.OldItems[0].GetType().Name);
		}
	}
}

======================================================================

public class ModuleAModule : IModule
{
    public void OnInitialized(IContainerProvider containerProvider)
    {
        var regionManager = containerProvider.Resolve<IRegionManager>();
        regionManager.RequestNavigate("ContentRegion", "PersonList");
    }

    public void RegisterTypes(IContainerRegistry containerRegistry)
    {
        containerRegistry.RegisterForNavigation<PersonList>();
        containerRegistry.RegisterForNavigation<PersonDetail>();
    }
}

======================================================================

public partial class PersonDetail : UserControl
{
    public PersonDetail()
    {
        InitializeComponent();
        RegionContext.GetObservableContext(this).PropertyChanged += PersonDetail_PropertyChanged;
    }

    private void PersonDetail_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        var context = (ObservableObject<object>)sender;
        var selectedPerson = (Person)context.Value;
        (DataContext as PersonDetailViewModel).SelectedPerson = selectedPerson;
    }
}

======================================================================

<ListBox Grid.Row="1" Margin="5" ItemsSource="{Binding Items}" SelectionMode="Single">
	<i:Interaction.Triggers>
		<!-- This event trigger will execute the action when the corresponding event is raised by the ListBox. -->
		<i:EventTrigger EventName="SelectionChanged">
			<!-- This action will invoke the selected command in the view model and pass the parameters of the event to it. -->
			<prism:InvokeCommandAction Command="{Binding SelectedCommand}" TriggerParameterPath="AddedItems" />
		</i:EventTrigger>
	</i:Interaction.Triggers>
</ListBox>


======================================================================

<m:ModuleCatalog xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:m="clr-namespace:Prism.Modularity;assembly=Prism.Wpf">

    <m:ModuleInfo ModuleName="ModuleAModule" 
                  ModuleType="ModuleA.ModuleAModule, ModuleA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />

</m:ModuleCatalog>

======================================================================

xxxx

======================================================================

xxxx

======================================================================